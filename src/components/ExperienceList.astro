---
import Grid from './Grid.astro'
import Icon from './Icon.astro'
import { Markdown } from 'astro/components'

interface Frontmatter {
  companyName: string
  title: string
  startDate: string
  endDate?: string
  website: string
  slug: string
}

function shouldPluralize(count: number) {
  return count > 1
}

function pluralizeYears(numYears: number) {
  return shouldPluralize(numYears) ? 'years' : 'year'
}

function pluralizeMonths(numMonths: number) {
  return shouldPluralize(numMonths) ? 'months' : 'month'
}

const dateFormatter = new Intl.DateTimeFormat('en-US', {
  year: 'numeric',
  month: 'short',
})

const dateFormatterMonth = new Intl.DateTimeFormat('en-US', {
  month: 'short',
})

const dateFormatterYear = new Intl.DateTimeFormat('en-US', {
  year: 'numeric',
})

const experience = (await Astro.glob<Frontmatter>('../md/experience/*.md'))
  .sort(
    (a, b) =>
      new Date(b.frontmatter.startDate).getTime() -
      new Date(a.frontmatter.startDate).getTime()
  )
  .map((job) => ({
    company: job.frontmatter.companyName,
    title: job.frontmatter.title,
    startMonth: dateFormatterMonth.format(new Date(job.frontmatter.startDate)),
    startYear: dateFormatterYear.format(new Date(job.frontmatter.startDate)),
    tenure: getDateRange(job.frontmatter.startDate, job.frontmatter.endDate),
    tenureInUnits: getDateDifference(
      job.frontmatter.startDate,
      job.frontmatter.endDate
    ),
    description: '',
    ...job,
  }))

function getDateDifference(startDate: string, endDate: string = '') {
  const start = new Date(startDate)
  const end = endDate ? new Date(endDate) : new Date()

  let years = end.getFullYear() - start.getFullYear()
  let months = end.getMonth() - start.getMonth()

  if (months < 0) {
    years--
    months += 12
  }

  const displayYears = years >= 1 ? `${years} ${pluralizeYears(years)}` : ''
  const displayMonths =
    years >= 1
      ? months % (12 * years) >= 1
        ? `${months % (12 * years)} ${pluralizeMonths(months % (12 * years))}`
        : ''
      : `${months} ${pluralizeMonths(months)}`

  const readableString = `${displayYears ? displayYears : displayMonths}`
  // const readableString = `${displayYears ? }${
  //   displayMonths ? `, ${displayMonths}` : ''
  // }`
  return readableString
}

function getDateRange(startDate: string, endDate: string = '') {
  return `${dateFormatter.format(new Date(startDate))} -
            ${endDate ? dateFormatter.format(new Date(endDate)) : 'present'}`
}
---

<div class="experience-list">
  {
    experience.map((job) => (
      <div class="experience-entry">
        <div class="summary">
          <div class="logo">
            <Icon
              name={job.company.replace(' ', '').toLowerCase()}
              set="logos"
            />
          </div>
          <div class="info">
            <div class="title">{job.title} </div>
            <div class="company">{job.company}</div>
            <div class="tenure">
              {job.tenure} ({job.tenureInUnits})
            </div>
          </div>
        </div>
      </div>
    ))
  }
</div>

<!-- <Grid>
  <span>
                {job.tenure} ({job.tenureInUnits})
              </span>
  {
    experience.map((job) => {
      return (
        <div class="experience-card">
          <div class="company-name">{job.frontmatter.companyName}</div>
          <div class="title">
            <Icon name="id-card" />
            {job.frontmatter.title}
          </div>
          <div class="tenure">
            {dateFormatter.format(new Date(job.frontmatter.startDate))} -{' '}
            {job.frontmatter.endDate
              ? dateFormatter.format(new Date(job.frontmatter.endDate))
              : 'present'}{' '}
          </div>
        </div>
      )
    })
  }
</Grid> -->
<style>
  /* .experience-logo {
    padding: var(--space-3xs);
    background-color: var(--surface-3);
    border-radius: 9999px;
    display: grid;
    place-items: center;
  }

  .experience-start .month {
    background-color: var(--color-accent);
    padding: var(--space-3xs) var(--space-xs);
  }

  .experience-start .year {
    padding: var(--space-3xs) var(--space-xs);
    background-color: var(--surface-3);
  } */
  /* .experience-list {
    --flow-space: var(--space-xs);
  }

  .experience-entry {
    display: flex;
    gap: var(--space-xs);
  }

  .sidebar {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-xs);
  } */

  .experience-list {
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
  }

  .experience-entry {
    display: flex;
    flex-direction: column;
    gap: var(--space-xs);
  }

  .summary {
    /* padding: var(--space-s); */
    display: flex;
    gap: var(--space-xs);
    /* background-color: var(--surface-1); */
    /* border-radius: 0.5rem; */
    /* box-shadow: 0 10px 15px -3px rgb(var(--dark-raw) / 0.1),
      0 4px 6px -4px rgb(var(--dark-raw) / 0.1); */
    /* overflow: hidden; */
  }

  .tenure {
    font-size: var(--size-step--1);
  }

  .logo {
    padding: var(--space-3xs);
    background-color: var(--surface-2);
    color: var(--surface-4);
    border-radius: 0.5rem;
    min-width: 48px;
    height: 48px;
    display: grid;
    place-items: center;
  }

  .info {
    flex: 1 1 auto;
    font-size: var(--size-step-0);
  }

  .title {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .company {
    font-size: var(--size-step--1);
  }
</style>
